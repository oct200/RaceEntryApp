plugins {
    id 'java'
    id 'application'
}

group = 'org.example'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    implementation project(':Networking')
    implementation project(':Server')
    implementation project(':Service')
    implementation project(':Persistence')
    implementation project(':Model')

    def javaFxVersion = '21'
    def os = org.gradle.internal.os.OperatingSystem.current()
    def platform = os.isWindows() ? 'win' : os.isMacOsX() ? 'mac' : 'linux'

    implementation "org.openjfx:javafx-base:${javaFxVersion}:${platform}"
    implementation "org.openjfx:javafx-controls:${javaFxVersion}:${platform}"
    implementation "org.openjfx:javafx-fxml:${javaFxVersion}:${platform}"
    implementation "org.openjfx:javafx-graphics:${javaFxVersion}:${platform}"

    implementation 'org.apache.logging.log4j:log4j-core:2.14.0'
    implementation 'org.apache.logging.log4j:log4j-api:2.14.0'

    runtimeOnly 'org.xerial:sqlite-jdbc:3.36.0.3'

    testImplementation enforcedPlatform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'
}

application {
    mainClass = "org.example.StartClient"
}

run {
    def javaFxVersion = '21'
    def os = org.gradle.internal.os.OperatingSystem.current()
    def platform = os.isWindows() ? 'win' : os.isMacOsX() ? 'mac' : 'linux'

    def javafxLibs = configurations.runtimeClasspath
            .filter { it.name.contains("javafx") }
            .collect { it.absolutePath }
            .join(System.getProperty("path.separator"))

    jvmArgs = [
            '--module-path', javafxLibs,
            '--add-modules', 'javafx.controls,javafx.fxml'
    ]
}


test {
    useJUnitPlatform()
}
